# Combina dados de entrada em um dataframe, o que facilita a manipulação.
df = data.frame(datetime, activity)
# omite NAs
df = na.omit(df)
# Usar coordenadas para calculo da duração do dia?
if (coord == FALSE){
## Esse bloco de código cria uma nova coluna no dataframe
## A nova coluna 'daylight' indica que o registro correspondente aquela linha foi realizado durante o dia
# Para cada linha extrai somente o valor da data, descartando as horas
dates = as.Date(df$datetime)
# concatena a data correspondete daquela linha com o horário de nascer e pôr do sol
sunrise = paste(dates, sunrise)
sunset = paste(dates, sunset)
# Verifica se o registro foi feito entre as horas de nascer e por do sol e adiciona a nova coluna 'daylight' ao dataframe
df$daylight = ifelse(test = df$datetime >= sunrise & df$datetime <= sunset, yes = TRUE, no = FALSE)
}
else{
## Para conseguir dados de nascer e por do sol, temos três opções em três pacotes diferentes:
## suncalc::getSunlightTimes, maptools::sunriset e StreamMetabolism::sunrise.set
## Em tempo de execuçao suncalc::getSunlightTimes foi mais rápido do que as outras funçoes
# cria novo vetor com as datas de nasce e por do sol para cada linha do df
sun = getSunlightTimes(as.Date(df$datetime), lat = lat, lon = lon, keep = c("sunrise", "sunset"))
# Verifica se df está entre as horas de nascer e por do sol e adiciona a nova coluna 'daylight' ao dataframe.
df$daylight = ifelse(test = df$datetime >= sun$sunrise & df$datetime <= sun$sunset, yes = TRUE, no = FALSE)
}
# Cria uma string de acordo com o intervalo de dias fornecido nos argumentos
b = paste(as.character(interval),"days")
# Cria um fator que corresponde ao intervalo de cada uma das linhas do df.
cuts = cut(x = df$datetime, breaks = b)
#  Cria uma lista dividida por intervalos
datetime.list = split(x = df, f = cuts)
# Separa atividade que acontece durante dia ou noite e calcula o indice de diurnalidade (Hoogenboom, 1984)
d.index = sapply(datetime.list,
function(x){
# indexa valores de atividade que acontecem durante o dia
actv.day = x$activity[x$daylight]
# indexa valores de atividade que acontecem durante a noite
actv.night = x$activity[!x$daylight]
# somatória da atividade diurna
actv.day = sum(actv.day)
# somatória da atividade noturna
actv.night = sum(actv.night)
# calculo do indice de diurnalidade (Hoogenboom, 1984)
d = (actv.day - actv.night)/(actv.day + actv.night)
}
)
##########
## plot ##
##########
if(graph){
# Prepara variaveis para criar retangulo e label do eixo X
n = length(d.index)
date.axis = strptime(names(d.index),"%Y-%m-%d")
# Define como exibir as legendas
if(interval >= 30){
# Para intervalos maiores do que 30 dias exibe o nome do mês e o ano.
date.axis = format(date.axis, "%b\n%Y")
}
else{
# Para intervalos menores do que 30 dias exibe dia e nome do mês.
date.axis = format(date.axis, "%d\n%b")
}
# prepara paramentros gráficos
par(pch=16,  tcl=-0.3,  bty="l", cex.axis = 0.9, las = 1, cex.lab=1, mar=c(4,4,2,2))
# plota pontos
plot(d.index,
main = "",
xlab = "",
xaxt = "n",
ylab = "Diurnality Index",
ylim = c(-1,1)
)
# adiciona eixo X
axis(1, at=1:n, labels=date.axis, mgp = c(3, 1.5, 0))
# adiciona retangulo cinza na parte noturna do indice
rect(xleft = c(-1,-1), ybottom = c(-2,-2), xright = c(n+2,n+2), ytop = c(0,0), col = rgb(0,0,0,0.009), lty=3, border = NA)
# conecta pontos
lines(x = 1:n, y = d.index, col = rgb(0,0,0,0.2), type = "b")
# adiciona linha horizontal
abline(h = 0, lty = 3, col = rgb(0,0,0,0.5))
}
############
## return ##
############
return(d.index)
} #FIM DIURNALITY
datetime = seq(ISOdate(2019,5,1), ISOdate(2019,7,1), "5 min")
activity = rpois(length(datetime), 5)
diurnality(datetime = datetime, activity = activity, lat = -23.5489, lon = -46.6388)
diurnality = function(datetime, activity, interval = 1, lat = NULL, lon = NULL, sunrise = NULL, sunset = NULL, graph = TRUE){
# checa se pacotes necessários estão instalados
if (!require(suncalc)){
# Instala pacotes caso não estejam instalados
install.packages("suncalc")
}else
{
# carrega pacotes necessários
# suncalc é usado para calcular a duração do dia em determinado dia do ano dado as coordenadas do local
require(suncalc)
}
#####################
# Verifica argumentos
#####################
#### Datetime deve ser do tipo POSIXct para evitar erros futuros
if(!inherits(datetime, "POSIXct")){
# caso não seja a função é parada
stop("Argumento 'datetime' deve ser da classe POSIXct")
}
# Intervalo para calculo do indice deve ser > 1
if(interval<=0){
stop("Argumento 'interval' deve ser >= 1")
}
if(!is.numeric(activity)){
stop("Argumento 'activity' deve ser numérico.")
}
if(length(activity) != length(datetime)){
stop("Argumentos 'datetime' e 'activity'devem ter o mesmo tamanho.")
}
#### Devem ser preenchido (sunrise e sunset) ou então (lat, lon)
if(is.null(sunrise) | is.null(sunset)){
if(is.null(lat) | is.null(lon)){
# Nenhum dos conjuntos de argumentos foi fornecido
stop("É necessário fornecer manualmente o valor de nascer e pôr do sol ou as coordenadas do local.")
}
else{
# caso apenas lat lon sejam fornecidas
cat(">>> A duração do dia será automaticamente calculada usando as coordenadas fornecidas.\n")
# atrbui TRUE para uma variavel indicadora, o que significa que a duração do dia seá calculada usando o pacote suncalc
coord = TRUE
}
}
else{
if(is.null(lat) | is.null(lon)) {
# checa se sunrise e sunset estão no formato correto de HH:MM
if ( is.na(as.POSIXct(paste(Sys.Date(), sunset), format = "%Y-%m-%d %H:%M")) | is.na(as.POSIXct(paste(Sys.Date(), sunrise), format = "%Y-%m-%d %H:%M"))) {
stop("'Sunrise' ou 'Sunset' não estão no formato HH:MM.")
}
else{
# caso apenas sunrise e sunset sejam fornecidos
cat(">>> A duração do dia será feita com base no horário de nascer e pôr do sol fornecidos.")
}
# atrbui FALSE, indicando que será usado os valores de sunrise e sunset fornecidos pelo usuário
coord = FALSE
}
else{
# Os dois conjuntos de argumentos foram fornecidos
stop("Apenas um conjunto de argumentos deve ser fornecido entre horário de nascer e pôr do sol e as coordenadas.")
}
}
####################
## calcula indice ##
####################
# Combina dados de entrada em um dataframe, o que facilita a manipulação.
df = data.frame(datetime, activity)
# omite NAs
df = na.omit(df)
# Usar coordenadas para calculo da duração do dia?
if (coord == FALSE){
## Esse bloco de código cria uma nova coluna no dataframe
## A nova coluna 'daylight' indica que o registro correspondente aquela linha foi realizado durante o dia
# Para cada linha extrai somente o valor da data, descartando as horas
dates = as.Date(df$datetime)
# concatena a data correspondete daquela linha com o horário de nascer e pôr do sol
sunrise = paste(dates, sunrise)
sunset = paste(dates, sunset)
# Verifica se o registro foi feito entre as horas de nascer e por do sol e adiciona a nova coluna 'daylight' ao dataframe
df$daylight = ifelse(test = df$datetime >= sunrise & df$datetime <= sunset, yes = TRUE, no = FALSE)
}
else{
## Para conseguir dados de nascer e por do sol, temos três opções em três pacotes diferentes:
## suncalc::getSunlightTimes, maptools::sunriset e StreamMetabolism::sunrise.set
## Em tempo de execuçao suncalc::getSunlightTimes foi mais rápido do que as outras funçoes
# cria novo vetor com as datas de nasce e por do sol para cada linha do df
sun = getSunlightTimes(as.Date(df$datetime), lat = lat, lon = lon, keep = c("sunrise", "sunset"))
# Verifica se df está entre as horas de nascer e por do sol e adiciona a nova coluna 'daylight' ao dataframe.
df$daylight = ifelse(test = df$datetime >= sun$sunrise & df$datetime <= sun$sunset, yes = TRUE, no = FALSE)
}
# Cria uma string de acordo com o intervalo de dias fornecido nos argumentos
b = paste(as.character(interval),"days")
# Cria um fator que corresponde ao intervalo de cada uma das linhas do df.
cuts = cut(x = df$datetime, breaks = b)
#  Cria uma lista dividida por intervalos
datetime.list = split(x = df, f = cuts)
# Separa atividade que acontece durante dia ou noite e calcula o indice de diurnalidade (Hoogenboom, 1984)
d.index = sapply(datetime.list,
function(x){
# indexa valores de atividade que acontecem durante o dia
actv.day = x$activity[x$daylight]
# indexa valores de atividade que acontecem durante a noite
actv.night = x$activity[!x$daylight]
# somatória da atividade diurna
actv.day = sum(actv.day)
# somatória da atividade noturna
actv.night = sum(actv.night)
# calculo do indice de diurnalidade (Hoogenboom, 1984)
d = (actv.day - actv.night)/(actv.day + actv.night)
}
)
##########
## plot ##
##########
if(graph){
# Prepara variaveis para criar retangulo e label do eixo X
n = length(d.index)
date.axis = strptime(names(d.index),"%Y-%m-%d")
# Define como exibir as legendas
if(interval >= 30){
# Para intervalos maiores do que 30 dias exibe o nome do mês e o ano.
date.axis = format(date.axis, "%b\n%Y")
}
else{
# Para intervalos menores do que 30 dias exibe dia e nome do mês.
date.axis = format(date.axis, "%d\n%b")
}
# prepara paramentros gráficos
par(pch=16,  tcl=-0.3,  bty="l", cex.axis = 0.9, las = 1, cex.lab=1, mar=c(4,4,2,2))
# plota pontos
plot(d.index,
main = "",
xlab = "",
xaxt = "n",
ylab = "Diurnality Index",
ylim = c(-1,1)
)
# adiciona eixo X
axis(1, at=1:n, labels=date.axis, mgp = c(3, 1.5, 0))
# adiciona retangulo cinza na parte noturna do indice
rect(xleft = c(-1,-1), ybottom = c(-2,-2), xright = c(n+2,n+2), ytop = c(0,0), col = rgb(0,0,0,0.009), lty=3, border = NA)
# conecta pontos
lines(x = 1:n, y = d.index, col = rgb(0,0,0,0.2), type = "b")
# adiciona linha horizontal
abline(h = 0, lty = 3, col = rgb(0,0,0,0.5))
}
############
## return ##
############
return(d.index)
} #FIM DIURNALITY
datetime = seq(ISOdate(2019,5,1), ISOdate(2019,7,1), "5 min")
activity = rpois(length(datetime), 5)
diurnality(datetime = datetime, activity = activity, lat = -23.5489, lon = -46.6388)
diurnality(datetime = datetime, activity = activity, lat = 60.192059, lon = 24.945831)
diurnality = function(datetime, activity, interval = 1, lat = NULL, lon = NULL, tz = NULL, sunrise = NULL, sunset = NULL, graph = TRUE){
# checa se pacotes necessários estão instalados
if (!require(suncalc)){
# Instala pacotes caso não estejam instalados
install.packages("suncalc")
}else
{
# carrega pacotes necessários
# suncalc é usado para calcular a duração do dia em determinado dia do ano dado as coordenadas do local
require(suncalc)
}
#####################
# Verifica argumentos
#####################
#### Datetime deve ser do tipo POSIXct para evitar erros futuros
if(!inherits(datetime, "POSIXct")){
# caso não seja a função é parada
stop("Argumento 'datetime' deve ser da classe POSIXct")
}
# Intervalo para calculo do indice deve ser > 1
if(interval<=0){
stop("Argumento 'interval' deve ser >= 1")
}
if(!is.numeric(activity)){
stop("Argumento 'activity' deve ser numérico.")
}
if(length(activity) != length(datetime)){
stop("Argumentos 'datetime' e 'activity'devem ter o mesmo tamanho.")
}
#### Devem ser preenchido (sunrise e sunset) ou então (lat, lon e tz)
if(is.null(sunrise) | is.null(sunset)){
if(is.null(lat) | is.null(lon) | is.null(tz)){
# Nenhum dos conjuntos de argumentos foi fornecido
stop("É necessário fornecer manualmente o valor de nascer e pôr do sol ou as coordenadas do local.")
}
else{
# caso apenas lat lon sejam fornecidas
cat(">>> A duração do dia será automaticamente calculada usando as coordenadas fornecidas.\n")
# atrbui TRUE para uma variavel indicadora, o que significa que a duração do dia seá calculada usando o pacote suncalc
coord = TRUE
}
}
else{
if(is.null(lat) | is.null(lon) | is.null(tz)){
# checa se sunrise e sunset estão no formato correto de HH:MM
if ( is.na(as.POSIXct(paste(Sys.Date(), sunset), format = "%Y-%m-%d %H:%M")) | is.na(as.POSIXct(paste(Sys.Date(), sunrise), format = "%Y-%m-%d %H:%M"))) {
stop("'Sunrise' ou 'Sunset' não estão no formato HH:MM.")
}
else{
# caso apenas sunrise e sunset sejam fornecidos
cat(">>> A duração do dia será feita com base no horário de nascer e pôr do sol fornecidos.")
}
# atrbui FALSE, indicando que será usado os valores de sunrise e sunset fornecidos pelo usuário
coord = FALSE
}
else{
# Os dois conjuntos de argumentos foram fornecidos
stop("Apenas um conjunto de argumentos deve ser fornecido entre horário de nascer e pôr do sol e as coordenadas.")
}
}
####################
## calcula indice ##
####################
# Combina dados de entrada em um dataframe, o que facilita a manipulação.
df = data.frame(datetime, activity)
# omite NAs
df = na.omit(df)
# Usar coordenadas para calculo da duração do dia?
if (coord == FALSE){
## Esse bloco de código cria uma nova coluna no dataframe
## A nova coluna 'daylight' indica que o registro correspondente aquela linha foi realizado durante o dia
# Para cada linha extrai somente o valor da data, descartando as horas
dates = as.Date(df$datetime)
# concatena a data correspondete daquela linha com o horário de nascer e pôr do sol
sunrise = paste(dates, sunrise)
sunset = paste(dates, sunset)
# Verifica se o registro foi feito entre as horas de nascer e por do sol e adiciona a nova coluna 'daylight' ao dataframe
df$daylight = ifelse(test = df$datetime >= sunrise & df$datetime <= sunset, yes = TRUE, no = FALSE)
}
else{
## Para conseguir dados de nascer e por do sol, temos três opções em três pacotes diferentes:
## suncalc::getSunlightTimes, maptools::sunriset e StreamMetabolism::sunrise.set
## Em tempo de execuçao suncalc::getSunlightTimes foi mais rápido do que as outras funçoes
# cria novo vetor com as datas de nasce e por do sol para cada linha do df
sun = getSunlightTimes(as.Date(df$datetime), lat = lat, lon = lon, tz = tz, keep = c("sunrise", "sunset"))
# Verifica se df está entre as horas de nascer e por do sol e adiciona a nova coluna 'daylight' ao dataframe.
df$daylight = ifelse(test = df$datetime >= sun$sunrise & df$datetime <= sun$sunset, yes = TRUE, no = FALSE)
}
# Cria uma string de acordo com o intervalo de dias fornecido nos argumentos
b = paste(as.character(interval),"days")
# Cria um fator que corresponde ao intervalo de cada uma das linhas do df.
cuts = cut(x = df$datetime, breaks = b)
#  Cria uma lista dividida por intervalos
datetime.list = split(x = df, f = cuts)
# Separa atividade que acontece durante dia ou noite e calcula o indice de diurnalidade (Hoogenboom, 1984)
d.index = sapply(datetime.list,
function(x){
# indexa valores de atividade que acontecem durante o dia
actv.day = x$activity[x$daylight]
# indexa valores de atividade que acontecem durante a noite
actv.night = x$activity[!x$daylight]
# somatória da atividade diurna
actv.day = sum(actv.day)
# somatória da atividade noturna
actv.night = sum(actv.night)
# calculo do indice de diurnalidade (Hoogenboom, 1984)
d = (actv.day - actv.night)/(actv.day + actv.night)
}
)
##########
## plot ##
##########
if(graph){
# Prepara variaveis para criar retangulo e label do eixo X
n = length(d.index)
date.axis = strptime(names(d.index),"%Y-%m-%d")
# Define como exibir as legendas
if(interval >= 30){
# Para intervalos maiores do que 30 dias exibe o nome do mês e o ano.
date.axis = format(date.axis, "%b\n%Y")
}
else{
# Para intervalos menores do que 30 dias exibe dia e nome do mês.
date.axis = format(date.axis, "%d\n%b")
}
# prepara paramentros gráficos
par(pch=16,  tcl=-0.3,  bty="l", cex.axis = 0.9, las = 1, cex.lab=1, mar=c(4,4,2,2))
# plota pontos
plot(d.index,
main = "",
xlab = "",
xaxt = "n",
ylab = "Diurnality Index",
ylim = c(-1,1)
)
# adiciona eixo X
axis(1, at=1:n, labels=date.axis, mgp = c(3, 1.5, 0))
# adiciona retangulo cinza na parte noturna do indice
rect(xleft = c(-1,-1), ybottom = c(-2,-2), xright = c(n+2,n+2), ytop = c(0,0), col = rgb(0,0,0,0.009), lty=3, border = NA)
# conecta pontos
lines(x = 1:n, y = d.index, col = rgb(0,0,0,0.2), type = "b")
# adiciona linha horizontal
abline(h = 0, lty = 3, col = rgb(0,0,0,0.5))
}
############
## return ##
############
return(d.index)
} #FIM DIURNALITY
x = read.csv("acelerometro", sep="\t")
acelerometro
as.POSIXct(celerometro$data.hora, format = "%Y-%m-%d %H:%M:%S")
as.POSIXct(acelerometro$data.hora, format = "%Y-%m-%d %H:%M:%S")
acelerometro$data.hora = as.POSIXct(acelerometro$data.hora, format = "%Y-%m-%d %H:%M:%S")
datetime = acelerometro$data.hora
activity =  acelerometro$ODBA
diurnality(datetime = datetime, activity = activity, lat = -23.5489, lon = -46.6388, tz="America/Sao_Paulo")
diurnality(datetime = datetime, activity = activity, lat = -23.5489, lon = -46.6388, tz="America/Argentina/La_Rioja")
getSunlightTimes(as.Date(datetime),lat = -23.5489, lon = -46.6388, tz="America/Argentina/La_Rioja", keep = c("sunrise", "sunset"))
getSunlightTimes(as.Date(datetime),lat = -23.5489, lon = -46.6388, tz="America/Sao_Paulo", keep = c("sunrise", "sunset"))
getSunlightTimes(as.Date(datetime),lat = -23.5489, lon = -46.6388, tz="asda", keep = c("sunrise", "sunset"))
getSunlightTimes(as.Date(datetime),lat = -23.5489, lon = -46.6388, tz="Europe/Amsterdam", keep = c("sunrise", "sunset"))
diurnality(datetime = datetime, activity = activity, lat = -23.5489, lon = -46.6388, tz="Europe/Amsterdam")
diurnality(datetime = datetime, activity = activity, lat = -23.5489, lon = -46.6388, tz="Europe/Amsterdam")
debug(diurnality)
diurnality(datetime = datetime, activity = activity, lat = -23.5489, lon = -46.6388, tz="America/Sao_Paulo")
View(sun)
diurnality(datetime = datetime, activity = activity, lat = -23.5489, lon = -46.6388, tz="Europe/Amsterdam")
sun
View(sun)
read.csv("roda",sep = " ")
read.csv("roda.txt",sep = " ")
y = read.csv("roda.txt",sep = " ")
View(y)
activity = y$X106
datetime = as.POSIXct(paste(y$X22.01.2017,y$X00.03.00), format = "%d/%m/%Y %H:%M:%S")
datetime
diurnality(datetime = datetime, activity = activity, lat = -23.5489, lon = -46.6388, tz="America/Sao_Paulo")
diurnality(datetime = datetime, activity = activity, lat = -23.5489, lon = -46.6388, tz="Europe/Amsterdam")
debug(diurnality)
diurnality(datetime = datetime, activity = activity, lat = -23.5489, lon = -46.6388, tz="America/Sao_Paulo")
diurnality(datetime = datetime, activity = activity, lat = -23.5489, lon = -46.6388, tz="America/Sao_Paulo")
View(sun)
df$datetime >= sun$sunrise
df$datetime >= sun$sunrise & df$datetime <= sun$sunset
View(df)
View(df)
diurnality(datetime = datetime, activity = activity, lat = -23.5489, lon = -46.6388, tz="Europe/Amsterdam")
View(df)
View(sun)
View(df)
df$datetime
sun$sunrise
diurnality(datetime = datetime, activity = activity, lat = -23.5489, lon = -46.6388, tz="America/Anchorage")
View(sun)
df$datetime
sun$sunrise
View(df)
diurnality(datetime = datetime, activity = activity, lat = -23.5489, lon = -46.6388, tz="America/Sao_Paulo")
diurnality(datetime = datetime, activity = activity, lat = -23.5489, lon = -46.6388, tz="America/Anchorage")
diurnality(datetime = datetime, activity = activity, lat = -23.5489, lon = -46.6388, tz="America/Anchorage")
f
diurnality(datetime = datetime, activity = activity, lat = -23.5489, lon = -46.6388, tz="America/Anchorage")
df$datetime >= sun$sunrise
attributes(sun$sunrise)
attributes(df$datetime)
acelerometro$data.hora = as.POSIXct(acelerometro$data.hora, format = "%Y-%m-%d %H:%M:%S", tz = "America/Sao_Paulo")
datetime = acelerometro$data.hora
activity =  acelerometro$ODBA
attributes(activity)
attributes(datetime)
acelerometro = read.csv("acelerometro.txt", sep = "\t")
acelerometro$data.hora = as.POSIXct(acelerometro$data.hora, format = "%Y-%m-%d %H:%M:%S", tz = "America/Sao_Paulo")
datetime = acelerometro$data.hora
activity =  acelerometro$ODBA
class(dat)
class(datetime)
attributes(datetime)
diurnality(datetime = datetime, activity = activity, lat = -23.5489, lon = -46.6388, tz="America/Sao_Paulo")
diurnality(datetime = datetime, activity = activity, lat = -23.5489, lon = -46.6388, tz="America/Anchorage")
diurnality(datetime = datetime, activity = activity, lat = -23.5489, lon = -46.6388, tz="America/Sao_Paulo")
activity
datetime
acelerometro = read.csv("acelerometro.txt", sep = "\t")
acelerometro$data.hora = as.POSIXct(acelerometro$data.hora, format = "%Y-%m-%d %H:%M:%S", tz = "America/Sao_Paulo")
acelerometro$data.hora
acelerometro = read.csv("acelerometro.txt", sep = "\t")
acelerometro$data.hora
acelerometro$data.hora = as.POSIXct(acelerometro$data.hora, format = "%d/%m/%Y %H:%M:%S", tz = "America/Sao_Paulo")
acelerometro$data.hora
datetime = acelerometro$data.hora
activity =  acelerometro$ODBA
attributes(datetime)
diurnality(datetime = datetime, activity = activity, lat = -23.5489, lon = -46.6388, tz="America/Sao_Paulo")
diurnality(datetime = datetime, activity = activity, lat = -23.5489, lon = -46.6388, tz="America/Anchorage")
diurnality(datetime = datetime, activity = activity, lat = -23.5489, lon = -46.6388, tz="America/Sao_Paulo")
attributes(sun$sunrise)
diurnality(datetime = datetime, activity = activity, lat = -23.5489, lon = -46.6388, tz="America/Anchorage")
attributes(sun$sunrise)
attributes(df$datetime)
View(df)
getSunlightTimes(as.Date(datetime),lat = -23.5489, lon = -46.6388, tz="America/Sao_Paulo", keep = c("sunrise", "sunset"))
diurnality(datetime = datetime, activity = activity, lat = -23.5489, lon = -46.6388, tz="America/Anchorage")
c
c
c
diurnality(datetime = datetime, activity = activity, lat = -23.5489, lon = -46.6388, tz="America/Anchorage")
as.numeric(sun$sunrise)
getSunlightTimes(as.Date(datetime),lat = -23.5489, lon = -46.6388, tz="America/Anchorage", keep = c("sunrise", "sunset"))
getSunlightTimes(as.Date(datetime),lat = -23.5489, lon = -46.6388, tz="America/Sao_Paulo", keep = c("sunrise", "sunset"))
a = getSunlightTimes(as.Date(datetime),lat = -23.5489, lon = -46.6388, tz="America/Anchorage", keep = c("sunrise", "sunset"))
b = getSunlightTimes(as.Date(datetime),lat = -23.5489, lon = -46.6388, tz="America/Sao_Paulo", keep = c("sunrise", "sunset"))
a==b
a
b
a$sunrise == b$sunrise
a$sunrise
b$sunrise
as.numeric(a$sunrise)
as.numeric(b$sunrise)
as.POSIXct("2018-10-20 00:20:44", tz = "UTC") ; as.POSIXct("2018-10-20 02:14:59", tz = "CST6CDT")
r = as.POSIXct("2018-10-20 00:20:44", tz = "UTC") ; t = as.POSIXct("2018-10-20 02:14:59", tz = "CST6CDT")
r < t
r;t
r = as.POSIXct("2018-10-20 00:20:44", tz = "UTC") ; t = as.POSIXct("2018-10-20 00:20:44", tz = "CST6CDT")
r;t
r < t
r == t
as.numeric(r)
as.numeric(t)
